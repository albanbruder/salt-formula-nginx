{%- set site = salt['pillar.get']('nginx:server:site:'+site_name) %}

{%- include 'nginx/files/_limit.conf' %}

{%- from 'nginx/files/headers/_strict_transport_security.conf' import strict_transport_security %}

{# Custom global config directives #}
{%- for directive in site.get('additional_global_configs', []) %}
  {%- for key in directive %}
{{ key }} {{ directive[key] }}
  {%- endfor %}
{%- endfor %}

server {
  {%- include 'nginx/files/_name.conf' %}
  {%- include 'nginx/files/_ssl.conf' %}

  {%- if site.get('underscores_in_headers', False) %}
  underscores_in_headers on;
  {%- endif %}

  {%- include 'nginx/files/_auth.conf' %}

  {%- set location = {} %}

  {%- if site.get('ssi', False) %}
  ssi on;
  {%- endif %}

  {%- if site.get('type') in ['nginx_static', 'nginx_redirect', 'nginx_stats'] %}
    {%- do location.update({'/': {}}) %}
  {%- elif site.get('type') == 'nginx_proxy' %}
    {%- if site.get('location') %}
      {# If site has proxy and not location '/' defined in model, update location dictionary to contain proxy part definition #}
      {%- if site.get('proxy') and not location.get('/')%}
        {%- do location.update({'/': site.proxy}) %}
      {%- endif %}
    {%- elif site.get('proxy') %}
      {# If location is not defined in model, use proxy definition by default #}
      {%- do location.update({'/': site.proxy}) %}
    {%- endif %}
  {%- endif %}

  {%- if site.get('location') %}
    {%- do location.update(site.location) %}
  {%- endif %}

  {%- if site.get('limit', {}).get('enabled', False) %}
  limit_req_status {{ site.limit.get('status_code', '429') }};
  limit_conn_status {{ site.limit.get('status_code', '429') }};
  {%- endif %}

  {%- for path, location in location.items() %}
  {%- if location.type is not defined %}
  {%- do location.update({'type': site.get('type', 'nginx_basic')}) %}
  {%- endif %}
  location {{ path }} {
      {%- include 'nginx/files/_' + location.type|replace('nginx_', '') + '_location.conf' %}

      {%- if site.get('ssl', {'enabled': False}).get('enabled', False) %}
      add_header Front-End-Https on;
      {{ strict_transport_security(site) | indent(6) }}
      {%- endif %}
      {%- for header, value in location.get('add_header', {}) %}
      add_header {{ header }} {{ value }};
      {%- endfor %}

      {%- if location.size is defined %}
      client_max_body_size {{ location.size }};
      {%- else %}
      client_max_body_size 512m;
      {% endif %}

      {# legacy option #}
      {%- if location.filter is defined %}
      sub_filter '{{ location.filter.search }}' {% if location.filter.replace == '$server_addr' %}$server_addr{% else %}'{{ location.filter.replace }}'{% endif %};
      sub_filter_types *;
      sub_filter_once off;
      {%- endif %}

      {%- for filter in location.get('sub_filters', []) %}
      sub_filter '{{ filter.search }}' {% if filter.replace.startswith('$') %}{{ filter.replace }}{% else %}'{{ filter.replace }}'{% endif %};
      {%- endfor %}
      {%- if location.sub_filter_types is defined %}
      sub_filter_types {{ location.sub_filter_types | join(' ') }};
      {%- endif %}
      sub_filter_once {{ location.get('sub_filter_once', 'off') }};

      {%- if site.get('limit', {}).get('enabled', False) %}
      limit_req zone={{ site_name }}{% if site.limit.get('burst', False) %} burst={{ site.limit.burst }}{% endif %}{% if site.limit.get('nodelay', False) %} nodelay{% endif %};
      {%-   for subfilter_name, subfilter in site.limit.get('subfilters', {}).items() %}
      limit_req zone={{ site_name }}_{{ subfilter_name }}{% if subfilter.get('burst', False) %} burst={{ subfilter.burst }}{% endif %}{% if subfilter.get('nodelay', False) %} nodelay{% endif %};
      {%-   endfor %}
      {%- endif %}

      {%- if site.webdav is defined %}

      {%- if site.webdav.methods is defined %}
      autoindex on;
      dav_methods {{ site.webdav.methods }};
      {%- endif %}
      {%- if site.webdav.ext_methods is defined %}
      dav_ext_methods {{ site.webdav.ext_methods }};
      {%- endif %}
      {%- if site.webdav.access is defined %}
      dav_access {{ site.webdav.access }};
      {%- endif %}

      {%- endif %}

      {%- set allow_remote_addr = location.get('allow_remote_addr', []) %}
      {%- for allow in allow_remote_addr %}
      allow {{ allow }};
      {%- endfor %}
      {%- if allow_remote_addr %}
      deny all;
      {%- endif %}

      {# Other custom config directives #}
      {%- for directive in location.get('configs', []) %}
        {%- for key in directive %}
      {{ key }} {{ directive[key] }};
        {%- endfor %}
      {%- endfor %}

      {# Raw nginx config pass-through #}
      {{ location.get('raw', '') }}
  }
{%- endfor %}
}
