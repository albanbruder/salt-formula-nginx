{%- from "nginx/map.jinja" import server with context %}
{%- if server.get('enabled', False) and server.get('site', {}).nginx_stats_server is defined %}
log_collector:
  decoder:
    nginx:
      engine: sandbox
      module_file: /usr/share/lma_collector/decoders/apache_wsgi_log.lua
      module_dir: /usr/share/lma_collector/common;/usr/share/heka/lua_modules
      config:
        logger: nginx
        apache_log_pattern: >-
          %h - %u %t \"%r\" %s %O \"%{Referer}i\" \"%{User-Agent}i\"
  splitter:
    nginx:
      engine: token
      delimiter: '\n'
  input:
    nginx_log:
      engine: logstreamer
      log_directory: "/var/log"
      file_match: 'nginx/(?P<Service>access)\.log\.?(?P<Seq>\d*)$'
      differentiator: ['nginx', '_', 'Service']
      priority: ["^Seq"]
      decoder: "nginx_decoder"
      splitter: "nginx_splitter"
metric_collector:
  trigger:
    nginx_check:
      description: 'nginx cannot be checked'
      severity: down
      rules:
      - metric: nginx_check
        relational_operator: '=='
        threshold: 0
        window: 60
        periods: 0
        function: last
  alarm:
    nginx_check:
      alerting: enabled
      triggers:
      - nginx_check
      dimension:
        service: nginx-check
aggregator:
  alarm_cluster:
    nginx_check:
      policy: availability_of_members
      alerting: enabled
      match:
        service: nginx-check
      group_by: hostname
      members:
      - nginx_check
      dimension:
        service: nginx
        nagios_host: 01-service-clusters
    nginx:
      policy: highest_severity
      alerting: enabled_with_notification
      match:
        service: nginx
      members:
      - nginx_check
      dimension:
        cluster_name: nginx
        nagios_host: 00-top-clusters
{%- endif %}
